def proc1(){
    var @x, y&, z : int;
    // retorno nao deveria possuir valor
    return 10;
}

def proc2(y[] : bool){
    return;
}

def func1(x,y: int; z : bool ) : bool{
    var _ : bool;
    
    // operacao relacional incorreta entre int e bool
    if (x > z){
        return false;
    } else {
        // retorno com tipo incorreto
        return 2;
    }

    return true;
}

def func2(k[] : int) : int{
    return k[1];
}

def main() : int {
    var i : int;
    var j : bool;
    var w[2] = {4,5} : int;

    // parametro passado, quando nao deveria
    proc1(10);
    // parametros de forma errada
    proc2(w);
    proc2(w[0]);

    // atribuicao de tipo incorreto
    i = func1(10, 15, true);
    // atribuicao sem declaracao e com numero de parametros errados
    y = func1(10, 15);
    // atribuicao com tipos de parametros errados
    j = func1(true, false, "bob");

    // acesso com tipo n√£o inteiro
    i = w["a"];
    // parametro da um "int" e nao um "array(int)"
    i = func2(w[1]);

    // chamada de procedimentos e funcoes que nao existem
    i = naoExisto();
    naoExistoTambem();

    return 0;
}